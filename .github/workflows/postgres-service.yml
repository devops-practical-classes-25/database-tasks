name: PostgreSQL Service Testing

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        volumes:
          - ./database_tasks/init/sql:/docker-entrypoint-initdb.d

    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          pip install poetry
          poetry install --no-interaction --no-ansi

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..15}; do
            if pg_isready -h localhost -p 5432 -U postgres -d postgres; then
              echo "PostgreSQL is ready"
              exit 0
            fi
            echo "Waiting for PostgreSQL... (attempt $i/15)"
            sleep 2
          done
          echo "PostgreSQL failed to start"
          docker logs $(docker ps -aqf "name=postgres")
          exit 1

      - name: Verify database initialization
        run: |
          echo "Listing all tables:"
          PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "\dt"
          
          echo "Checking author table content:"
          PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "SELECT * FROM author;"
          
          echo "Checking demo user exists:"
          PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "\du"

      - name: Run database tests
        run: |
          poetry run pytest database_tasks/tests/test_database.py -v --cov=./ --cov-report=xml
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
          DB_USER: demo
          DB_PASSWORD: demo
          DB_NAME: demo

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        if: always()

      - name: Archive logs on failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: postgres-logs
          path: |
            $(docker inspect --format='{{.LogPath}}' $(docker ps -aqf "name=postgres"))
